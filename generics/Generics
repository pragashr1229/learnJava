
Generics :
=========
Java Generics is a set of related methods or a set of similar types.

Advantage of Java Generics
==========================
1) Type-safety: Type safety means that the compiler will validate types while
		  		compiling, and throw an error if you try to assign the wrong type to a variable.
		  		
Without Generics, we can store any type of objects.
	List list = new ArrayList();    
	list.add(10);  
	list.add("10");  
With Generics, it is required to specify the type of object we need to store.  
	List<Integer> list = new ArrayList<Integer>();    
	list.add(10);  
	list.add("10");// compile-time error  

2) Type casting is not required: There is no need to typecast the object.

In Java, there are two types of casting:

Widening Casting (automatically) - converting a smaller type to a larger type size
byte -> short -> char -> int -> long -> float -> double


Narrowing Casting (manually) - converting a larger type to a smaller size type
double -> float -> long -> int -> char -> short -> byte

Before Generics, we need to type cast.

	List list = new ArrayList();    
	list.add("hello");    
	String s = (String) list.get(0);//typecasting    
	//After Generics, we don't need to typecast the object.  
	List<String> list = new ArrayList<String>();    
	list.add("hello");    
	String s = list.get(0);    

3) Compile-Time Checking: It is checked at compile time so problem will not occur at runtime. 
List<String> list = new ArrayList<String>();    
list.add("hello");    
list.add(32);//Compile Time Error    